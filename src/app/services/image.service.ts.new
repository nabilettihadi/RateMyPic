import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';
import { Image, RateRequest, RateResponse } from '../models/image';

@Injectable({
  providedIn: 'root'
})
export class ImageService {
  private readonly GET_IMAGES_URL = 'https://api.mademyday.ai/Mock/getimages.php';
  private readonly RATE_IMAGES_URL = 'https://api.mademyday.ai/Mock/rateimages.php';

  constructor(private http: HttpClient) {}

  getImages(): Observable<Image[]> {
    console.log('Fetching images from API:', this.GET_IMAGES_URL);
    return this.http.get<Image[]>(this.GET_IMAGES_URL).pipe(
      tap(images => console.log('Received images from API:', images)),
      catchError((error: HttpErrorResponse) => {
        console.error('Error fetching images:', error);
        // Retourner des images de test en cas d'erreur
        const fallbackImages: Image[] = [
          {
            id: 1,
            url: 'https://images.unsplash.com/photo-1682687220063-4742bd7fd538',
            description: 'Magnifique paysage de montagne',
            likes: 42
          },
          {
            id: 2,
            url: 'https://images.unsplash.com/photo-1682687220063-4742bd7fd538',
            description: 'Coucher de soleil sur la plage',
            likes: 28
          },
          {
            id: 3,
            url: 'https://images.unsplash.com/photo-1682687220063-4742bd7fd538',
            description: 'Forêt tropicale luxuriante',
            likes: 15
          }
        ];
        console.log('Returning fallback images:', fallbackImages);
        return of(fallbackImages);
      })
    );
  }

  rateImage(rateRequest: RateRequest): Observable<RateResponse> {
    console.log('Rating image with request:', rateRequest);
    return this.http.post<RateResponse>(this.RATE_IMAGES_URL, rateRequest).pipe(
      tap(response => console.log('Rate image response:', response)),
      catchError((error: HttpErrorResponse) => {
        console.error('Error rating image:', error);
        // Retourner une réponse de test en cas d'erreur
        const fallbackResponse: RateResponse = {
          status: 'ERROR' as const,
          message: 'Failed to rate image due to network error'
        };
        console.log('Returning fallback response:', fallbackResponse);
        return of(fallbackResponse);
      })
    );
  }
} 